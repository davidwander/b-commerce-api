import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

interface CreateSaleData {
  clientName: string;
  phone?: string;
  address?: string;
  userId: number;
}

interface AddPieceToSaleData {
  saleId: string;
  pieceId: string;
  quantity: number;
}

interface GetSalesParams {
  userId: number;
  status?: 'open-no-pieces' | 'open-awaiting-payment' | 'closed' | ('open-no-pieces' | 'open-awaiting-payment')[];
  page?: number;
  limit?: number;
}

class SaleService {
  async createSale(data: CreateSaleData) {
    try {
      console.log('üõçÔ∏è === SALE SERVICE: Criando venda ===');
      console.log('üì¶ Dados recebidos:', {
        clientName: data.clientName,
        phone: data.phone || 'n√£o informado',
        address: data.address || 'n√£o informado',
        userId: data.userId
      });

      // Valida√ß√µes b√°sicas
      if (!data.clientName || data.clientName.trim() === '') {
        throw new Error('Nome do cliente √© obrigat√≥rio');
      }

      if (!data.userId || typeof data.userId !== 'number') {
        throw new Error('ID do usu√°rio √© obrigat√≥rio e deve ser um n√∫mero');
      }

      // Verificar se o usu√°rio existe
      const user = await prisma.user.findUnique({
        where: { id: data.userId }
      });

      if (!user) {
        console.log('‚ùå Usu√°rio n√£o encontrado:', data.userId);
        throw new Error('Usu√°rio n√£o encontrado');
      }

      console.log('‚úÖ Usu√°rio encontrado:', user.name);

      const sale = await prisma.sale.create({
        data: {
          clientName: data.clientName.trim(),
          phone: data.phone?.trim() || null,
          address: data.address?.trim() || null,
          userId: data.userId,
        },
      });

      console.log('‚úÖ SALE SERVICE: Venda criada com sucesso:', sale.id);
      return sale;
    } catch (error) {
      console.error('‚ùå SALE SERVICE: Erro ao criar venda:', error);
      throw error; // Re-throw para que o controller possa tratar
    }
  }

  async getSalesByUser(params: GetSalesParams) {
    try {
      const { userId, status, page = 1, limit = 10 } = params;
      const effectiveStatus = status || ['open-no-pieces', 'open-awaiting-payment'];
      
      console.log('üìã === SALE SERVICE: Listando vendas ===');
      console.log('üë§ User ID:', userId);
      console.log('üìä Status:', effectiveStatus);
      console.log('üìÑ P√°gina:', page, 'Limite:', limit);

      // Valida√ß√µes
      if (!userId || typeof userId !== 'number') {
        throw new Error('ID do usu√°rio √© obrigat√≥rio e deve ser um n√∫mero');
      }

      const skip = (page - 1) * limit;

      // Buscar vendas com informa√ß√µes das pe√ßas
      const sales = await prisma.sale.findMany({
        where: {
          userId: userId,
          status: effectiveStatus,
        },
        include: {
          salePieces: {
            include: {
              piece: true
            }
          }
        },
        orderBy: {
          createdAt: 'desc'
        },
        skip: skip,
        take: limit,
      });

      // O status j√° vem filtrado do banco de dados.
      // As propriedades totalPieces e totalValue ainda precisam ser calculadas para cada venda.
      const processedSales = sales.map(sale => {
        const totalPieces = sale.salePieces.reduce((sum, sp) => sum + sp.quantity, 0);
        const totalValue = sale.salePieces.reduce((sum, sp) => {
          return sum + (sp.piece.price * sp.quantity);
        }, 0);
        
        return {
          ...sale,
          totalPieces,
          totalValue,
          status: sale.status, // Usar o status que j√° veio do DB
          salePieces: sale.salePieces.map(sp => ({
            ...sp,
            piece: {
              id: sp.piece.id,
              description: sp.piece.description,
              price: sp.piece.price,
            }
          }))
        };
      });

      // Contar total para pagina√ß√£o (apenas vendas do usu√°rio com o status filtrado)
      const totalCount = await prisma.sale.count({
        where: {
          userId: userId,
          status: effectiveStatus,
        }
      });

      // O totalFiltered agora √© o totalCount direto do DB ap√≥s o filtro de status
      const totalFiltered = totalCount;

      console.log(`‚úÖ SALE SERVICE: ${processedSales.length} vendas encontradas de ${totalFiltered} total`);

      return {
        sales: processedSales,
        total: totalFiltered,
        page,
        limit
      };
    } catch (error) {
      console.error('‚ùå SALE SERVICE: Erro ao listar vendas:', error);
      throw error;
    }
  }

  async getSaleById(saleId: string, userId: number) {
    try {
      console.log('üîç === SALE SERVICE: Buscando venda por ID ===');
      console.log('üè∑Ô∏è Sale ID:', saleId);
      console.log('üë§ User ID:', userId);

      // Valida√ß√µes
      if (!saleId || saleId.trim() === '') {
        throw new Error('ID da venda √© obrigat√≥rio');
      }

      if (!userId || typeof userId !== 'number') {
        throw new Error('ID do usu√°rio √© obrigat√≥rio e deve ser um n√∫mero');
      }

      const sale = await prisma.sale.findFirst({
        where: {
          id: saleId,
          userId: userId, // Garantir que a venda pertence ao usu√°rio
        },
        include: {
          salePieces: {
            include: {
              piece: {
                select: {
                  id: true,
                  description: true,
                  price: true,
                  categoryPath: true,
                }
              }
            }
          }
        }
      });

      if (!sale) {
        console.log('‚ùå SALE SERVICE: Venda n√£o encontrada');
        return null;
      }

      // Calcular informa√ß√µes adicionais
      const totalPieces = sale.salePieces.reduce((sum, sp) => sum + sp.quantity, 0);
      const totalValue = sale.salePieces.reduce((sum, sp) => {
        return sum + (sp.piece.price * sp.quantity);
      }, 0);

      const processedSale = {
        ...sale,
        totalPieces,
        totalValue,
        status: sale.status, // Usar o status que j√° veio do DB
      };

      console.log('‚úÖ SALE SERVICE: Venda encontrada:', sale.id);
      return processedSale;
    } catch (error) {
      console.error('‚ùå SALE SERVICE: Erro ao buscar venda:', error);
      throw error;
    }
  }

  async addPieceToSale(data: AddPieceToSaleData) {
    try {
      console.log('‚ûï === SALE SERVICE: Adicionando pe√ßa √† venda ===');
      console.log('üì¶ Dados:', data);

      // Valida√ß√µes
      if (!data.saleId || data.saleId.trim() === '') {
        throw new Error('ID da venda √© obrigat√≥rio');
      }

      if (!data.pieceId || data.pieceId.trim() === '') {
        throw new Error('ID da pe√ßa √© obrigat√≥rio');
      }

      if (!data.quantity || data.quantity <= 0) {
        throw new Error('Quantidade deve ser maior que zero');
      }

      // Verificar se a venda existe
      const sale = await prisma.sale.findUnique({
        where: { id: data.saleId }
      });

      if (!sale) {
        throw new Error('Venda n√£o encontrada');
      }

      // Verificar se a pe√ßa existe
      const piece = await prisma.piece.findUnique({
        where: { id: data.pieceId }
      });

      if (!piece) {
        throw new Error('Pe√ßa n√£o encontrada');
      }

      // Verificar se h√° estoque suficiente
      if (piece.quantity < data.quantity) {
        throw new Error(`Estoque insuficiente. Dispon√≠vel: ${piece.quantity}, Solicitado: ${data.quantity}`);
      }

      // Verificar se a pe√ßa j√° foi adicionada √† venda
      const existingSalePiece = await prisma.salePiece.findUnique({
        where: {
          saleId_pieceId: {
            saleId: data.saleId,
            pieceId: data.pieceId
          }
        }
      });

      if (existingSalePiece) {
        // Atualizar quantidade se j√° existe
        const updatedSalePiece = await prisma.salePiece.update({
          where: {
            id: existingSalePiece.id
          },
          data: {
            quantity: existingSalePiece.quantity + data.quantity
          }
        });

        // Atualizar estoque
        await prisma.piece.update({
          where: { id: data.pieceId },
          data: {
            quantity: piece.quantity - data.quantity
          }
        });

        // Atualizar o status da venda se necess√°rio (ap√≥s a primeira pe√ßa)
        if (sale.status === 'open-no-pieces') {
          await prisma.sale.update({
            where: { id: sale.id },
            data: { status: 'open-awaiting-payment' }
          });
          console.log(`‚úÖ SALE SERVICE: Status da venda ${sale.id} atualizado para 'open-awaiting-payment'`);
        }

        console.log('‚úÖ SALE SERVICE: Quantidade da pe√ßa atualizada na venda');
        return updatedSalePiece;
      } else {
        // Criar nova entrada
        const salePiece = await prisma.salePiece.create({
          data: {
            saleId: data.saleId,
            pieceId: data.pieceId,
            quantity: data.quantity,
          },
        });

        // Atualizar estoque
        await prisma.piece.update({
          where: { id: data.pieceId },
          data: {
            quantity: piece.quantity - data.quantity
          }
        });

        // Atualizar o status da venda (primeira pe√ßa adicionada)
        if (sale.status === 'open-no-pieces') {
          await prisma.sale.update({
            where: { id: sale.id },
            data: { status: 'open-awaiting-payment' }
          });
          console.log(`‚úÖ SALE SERVICE: Status da venda ${sale.id} atualizado para 'open-awaiting-payment'`);
        }

        console.log('‚úÖ SALE SERVICE: Pe√ßa adicionada √† venda com sucesso');
        return salePiece;
      }
    } catch (error) {
      console.error('‚ùå SALE SERVICE: Erro ao adicionar pe√ßa √† venda:', error);
      throw error;
    }
  }
}

export default SaleService;