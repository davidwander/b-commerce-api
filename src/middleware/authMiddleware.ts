import { FastifyRequest, FastifyReply } from 'fastify';
import AuthService from '../services/AuthService.js';
import tokenBlacklistService from '../services/TokenBlackListService.js'

// Estender a interface do FastifyRequest para incluir dados do usu√°rio
declare module 'fastify' {
  interface FastifyRequest {
    userId?: string;
    userEmail?: string;
  }
}

class AuthMiddleware {
  private authService: AuthService;

  constructor() {
    this.authService = new AuthService();
  }

  // Middleware para verificar autentica√ß√£o
  async authenticate(request: FastifyRequest, reply: FastifyReply) {
    try {
      console.log('üîê === AUTH MIDDLEWARE: Verificando autentica√ß√£o ===');
      console.log('üåê Rota:', request.method, request.url);
      console.log('üïê Timestamp:', new Date().toISOString());

      // Log dos headers (sem mostrar valores sens√≠veis)
      console.log('üìã Headers recebidos:', {
        'user-agent': request.headers['user-agent']?.substring(0, 50) + '...',
        'content-type': request.headers['content-type'],
        'content-length': request.headers['content-length'],
        'host': request.headers.host,
        'authorization': request.headers.authorization ? 'PRESENTE' : 'AUSENTE'
      });

      // Buscar token no header Authorization
      const authHeader = request.headers.authorization;
      
      if (!authHeader) {
        console.log('‚ùå AUTH MIDDLEWARE: Header Authorization n√£o encontrado');
        return reply.status(401).send({
          error: 'Token de acesso n√£o fornecido',
          code: 'MISSING_TOKEN'
        });
      }

      console.log('üîë AUTH MIDDLEWARE: Authorization header presente');
      console.log('üîç AUTH MIDDLEWARE: Header format:', authHeader.substring(0, 20) + '...');

      // Verificar formato: "Bearer TOKEN"
      if (!authHeader.startsWith('Bearer ')) {
        console.log('‚ùå AUTH MIDDLEWARE: Formato inv√°lido - n√£o come√ßa com "Bearer "');
        return reply.status(401).send({
          error: 'Formato de token inv√°lido. Use: Bearer <token>',
          code: 'INVALID_TOKEN_FORMAT'
        });
      }

      const token = authHeader.replace('Bearer ', '');
      
      if (!token) {
        console.log('‚ùå AUTH MIDDLEWARE: Token vazio ap√≥s remover "Bearer "');
        return reply.status(401).send({
          error: 'Token vazio',
          code: 'EMPTY_TOKEN'
        });
      }

      console.log('‚úÖ AUTH MIDDLEWARE: Token extra√≠do com sucesso');
      console.log('üîç AUTH MIDDLEWARE: Token (primeiros 30 chars):', token.substring(0, 30) + '...');
      console.log('üîç AUTH MIDDLEWARE: Token length:', token.length);

      // Validar token
      console.log('üîì AUTH MIDDLEWARE: Iniciando valida√ß√£o do token...');
      const decoded = await this.authService.validateToken(token);
      
      if (!decoded) {
        console.log('‚ùå AUTH MIDDLEWARE: Token inv√°lido ou expirado');
        return reply.status(401).send({
          error: 'Token inv√°lido ou expirado',
          code: 'INVALID_TOKEN'
        });
      }

      console.log('‚úÖ AUTH MIDDLEWARE: Token v√°lido');
      console.log('üìã AUTH MIDDLEWARE: Dados do token:', {
        userId: decoded.userId,
        email: decoded.email,
        iat: decoded.iat ? new Date(decoded.iat * 1000).toISOString() : 'N/A',
        exp: decoded.exp ? new Date(decoded.exp * 1000).toISOString() : 'N/A'
      });

      // Verificar se token est√° na blacklist
      console.log('üîç AUTH MIDDLEWARE: Verificando blacklist...');
      const isBlacklisted = await tokenBlacklistService.isTokenBlacklisted(token);
      
      if (isBlacklisted) {
        console.log('‚ùå AUTH MIDDLEWARE: Token est√° na blacklist');
        return reply.status(401).send({
          error: 'Token foi invalidado. Fa√ßa login novamente.',
          code: 'TOKEN_BLACKLISTED'
        });
      }

      console.log('‚úÖ AUTH MIDDLEWARE: Token n√£o est√° na blacklist');

      // Adicionar dados do usu√°rio √† requisi√ß√£o
      request.userId = decoded.userId;
      request.userEmail = decoded.email;

      console.log('‚úÖ AUTH MIDDLEWARE: Usu√°rio autenticado com sucesso:', decoded.email);
      console.log('üîê === FIM AUTH MIDDLEWARE - SUCESSO ===');

      // Continuar para a pr√≥xima fun√ß√£o
      return;

    } catch (error: unknown) {
      console.error('‚ùå AUTH MIDDLEWARE: Erro durante autentica√ß√£o:', error);
      
      // Log mais detalhado do erro
      if (error instanceof Error) {
        console.error('‚ùå AUTH MIDDLEWARE: Nome do erro:', error.name);
        console.error('‚ùå AUTH MIDDLEWARE: Mensagem:', error.message);
        console.error('‚ùå AUTH MIDDLEWARE: Stack:', error.stack);
      }
      
      return reply.status(500).send({
        error: 'Erro interno de autentica√ß√£o',
        code: 'AUTH_MIDDLEWARE_ERROR',
        details: process.env.NODE_ENV === 'development' ? (error instanceof Error ? error.message : 'Erro desconhecido') : undefined
      });
    }
  }

  // Middleware opcional - permite acesso com ou sem autentica√ß√£o
  async optionalAuth(request: FastifyRequest, _reply: FastifyReply) {
    try {
      console.log('üîì === AUTH MIDDLEWARE: Autentica√ß√£o opcional ===');

      const authHeader = request.headers.authorization;
      
      if (!authHeader) {
        console.log('‚ÑπÔ∏è AUTH MIDDLEWARE: Nenhum token fornecido - continuando sem autentica√ß√£o');
        return;
      }

      const token = authHeader.replace('Bearer ', '');
      
      if (!token || token === authHeader) {
        console.log('‚ÑπÔ∏è AUTH MIDDLEWARE: Formato de token inv√°lido - continuando sem autentica√ß√£o');
        return;
      }

      console.log('üîç AUTH MIDDLEWARE: Tentando validar token opcional...');
      const decoded = await this.authService.validateToken(token);
      
      if (decoded) {
        request.userId = decoded.userId;
        request.userEmail = decoded.email;
        console.log('‚úÖ AUTH MIDDLEWARE: Usu√°rio autenticado opcionalmente:', decoded.email);
      } else {
        console.log('‚ÑπÔ∏è AUTH MIDDLEWARE: Token inv√°lido - continuando sem autentica√ß√£o');
      }

      return;

    } catch (error: unknown) {
      console.error('‚ùå AUTH MIDDLEWARE: Erro na autentica√ß√£o opcional:', error);
      // Em caso de erro, continua sem autentica√ß√£o
      return;
    }
  }

  // Middleware para verificar se o usu√°rio √© admin (exemplo futuro)
  async requireAdmin(request: FastifyRequest, reply: FastifyReply) {
    try {
      console.log('üîí === AUTH MIDDLEWARE: Verifica√ß√£o de admin ===');
      
      // Primeiro verifica se est√° autenticado
      await this.authenticate(request, reply);

      // Aqui voc√™ poderia verificar se o usu√°rio tem permiss√£o de admin
      // Por enquanto, vamos apenas verificar se est√° autenticado
      
      console.log('‚úÖ AUTH MIDDLEWARE: Verifica√ß√£o de admin passou para:', request.userEmail);
      return;

    } catch (error: unknown) {
      console.error('‚ùå AUTH MIDDLEWARE: Erro na verifica√ß√£o de admin:', error);
      
      return reply.status(403).send({
        error: 'Acesso negado - permiss√µes insuficientes',
        code: 'INSUFFICIENT_PERMISSIONS',
        details: process.env.NODE_ENV === 'development' ? (error instanceof Error ? error.message : 'Erro desconhecido') : undefined
      });
    }
  }

  // M√©todo auxiliar para debug - use apenas em desenvolvimento
  async debugTokenInfo(token: string) {
    try {
      console.log('üîç === DEBUG TOKEN INFO ===');
      console.log('üîë Token length:', token.length);
      console.log('üîë Token (primeiros 50 chars):', token.substring(0, 50) + '...');
      
      // Tentar decodificar o payload (sem verificar assinatura)
      const parts = token.split('.');
      if (parts.length === 3) {
        try {
          const payload = JSON.parse(Buffer.from(parts[1], 'base64').toString());
          console.log('üìã Payload do token:', {
            userId: payload.userId,
            email: payload.email,
            iat: payload.iat ? new Date(payload.iat * 1000).toISOString() : 'N/A',
            exp: payload.exp ? new Date(payload.exp * 1000).toISOString() : 'N/A',
            expirado: payload.exp ? new Date(payload.exp * 1000) < new Date() : 'N/A',
            tempoRestante: payload.exp ? Math.max(0, payload.exp - Math.floor(Date.now() / 1000)) + 's' : 'N/A'
          });
        } catch (e) {
          console.log('‚ùå Erro ao decodificar payload:', e);
        }
      } else {
        console.log('‚ùå Token n√£o tem formato JWT v√°lido (n√£o tem 3 partes)');
      }

      // Tentar validar com o servi√ßo
      console.log('üîì Testando valida√ß√£o com AuthService...');
      const decoded = await this.authService.validateToken(token);
      console.log('‚úÖ Valida√ß√£o do AuthService:', decoded ? 'V√ÅLIDO' : 'INV√ÅLIDO');
      if (decoded) {
        console.log('üë§ Dados validados:', { userId: decoded.userId, email: decoded.email });
      }

      // Verificar blacklist
      console.log('üìù Verificando blacklist...');
      const isBlacklisted = await tokenBlacklistService.isTokenBlacklisted(token);
      console.log('üìù Token na blacklist:', isBlacklisted ? 'SIM' : 'N√ÉO');

      console.log('üîç === FIM DEBUG TOKEN INFO ===');

    } catch (error) {
      console.error('‚ùå Erro no debug do token:', error);
    }
  }
}

export default AuthMiddleware;