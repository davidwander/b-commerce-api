import { FastifyRequest, FastifyReply } from 'fastify';

export default async function authenticateToken(request: FastifyRequest, reply: FastifyReply) {
  try {
    console.log('üîê === MIDDLEWARE DE AUTENTICA√á√ÉO ===');
    console.log('üìã Headers recebidos:', Object.keys(request.headers));
    
    const authHeader = request.headers.authorization;
    console.log('üîë Auth header:', authHeader ? 'PRESENTE' : 'AUSENTE');
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      console.log('‚ùå Token n√£o fornecido ou formato inv√°lido');
      return reply.status(401).send({
        error: 'Token de acesso n√£o fornecido ou formato inv√°lido.'
      });
    }

    const token = authHeader.substring(7);
    console.log('üéØ Token extra√≠do (primeiros 20 chars):', token.substring(0, 20) + '...');
    
    if (!token) {
      console.log('‚ùå Token vazio ap√≥s extra√ß√£o');
      return reply.status(401).send({
        error: 'Token de acesso n√£o fornecido.'
      });
    }

    // Verificar e decodificar o token JWT usando o m√©todo do Fastify
    try {
      console.log('üîç Verificando JWT...');
      
      // Usar o m√©todo jwtVerify do Fastify que j√° est√° registrado
      const decoded = await request.jwtVerify();
      console.log('‚úÖ Token decodificado:', decoded);
      
      // Extrair o userId do payload decodificado
      const userId = (decoded as any).userId;
      
      if (!userId) {
        console.log('‚ùå userId n√£o encontrado no token decodificado');
        return reply.status(401).send({
          error: 'Token inv√°lido: ID do usu√°rio n√£o encontrado.'
        });
      }
      
      // Adicionar o userId ao request para uso nos controllers
      (request as any).userId = userId;
      console.log('‚úÖ Token v√°lido para usu√°rio:', userId);
      
    } catch (jwtError) {
      console.error('‚ùå Erro ao verificar JWT:', jwtError);
      return reply.status(401).send({
        error: 'Token inv√°lido ou expirado.'
      });
    }

    console.log('‚úÖ MIDDLEWARE: Autentica√ß√£o bem-sucedida');
    
  } catch (error) {
    console.error('üí• Erro no middleware de autentica√ß√£o:', error);
    return reply.status(500).send({
      error: 'Erro interno no servidor de autentica√ß√£o.'
    });
  }
}