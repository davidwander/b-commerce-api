generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement()) 
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  
  // Relacionamento com peças
  pieces    Piece[] 
  
  // Relacionamento com vendas
  sales     Sale[] // Adicionado para relação inversa com Sale
  
  @@map("users")
}

model Category {
  id        String   @id
  name      String
  parentId  String?  @map("parent_id")
  level     Int
  createdAt DateTime @default(now()) @map("created_at")

  // Relacionamentos
  parent     Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children   Category[] @relation("CategoryHierarchy")
  
  // Peças relacionadas
  piecesAsCategory     Piece[] @relation("CategoryPieces")
  piecesAsSubcategory  Piece[] @relation("SubcategoryPieces")
  piecesAsGender       Piece[] @relation("GenderPieces")

  @@map("categories")
}

model Piece {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description   String
  categoryId    String   @map("category_id")
  subcategoryId String?  @map("subcategory_id")
  genderId      String?  @map("gender_id")
  categoryPath  String   @map("category_path")
  quantity      Int      @default(1)
  price         Float    @default(0.00)
  userId        Int      @map("user_id") 
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  category     Category  @relation("CategoryPieces", fields: [categoryId], references: [id])
  subcategory  Category? @relation("SubcategoryPieces", fields: [subcategoryId], references: [id])
  gender       Category? @relation("GenderPieces", fields: [genderId], references: [id])
  user         User      @relation(fields: [userId], references: [id])  
  salePieces   SalePiece[] // Adicionado para relação inversa com SalePiece

  @@map("pieces")
}

model Sale {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clientName    String   @map("client_name")
  phone         String?
  address       String?
  userId        Int      @map("user_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  user          User     @relation(fields: [userId], references: [id])
  salePieces    SalePiece[] // Relação inversa para SalePiece

  @@map("sales")
}

model SalePiece {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  saleId        String   @map("sale_id") @db.Uuid
  pieceId       String   @map("piece_id") @db.Uuid
  quantity      Int
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  sale          Sale     @relation(fields: [saleId], references: [id])
  piece         Piece    @relation(fields: [pieceId], references: [id])

  @@unique([saleId, pieceId]) // Garante que uma peça só pode ser adicionada uma vez a uma venda
  @@map("sale_pieces")
}